-- Credits to Inf Yield & all the other scripts that helped me make bypasses
local GuiLibrary = shared.GuiLibrary
local players = game:GetService("Players")
local textservice = game:GetService("TextService")
local lplr = players.LocalPlayer
local workspace = game:GetService("Workspace")
local lighting = game:GetService("Lighting")
local cam = workspace.CurrentCamera
local targetinfo = shared.VapeTargetInfo
local uis = game:GetService("UserInputService")
local mouse = lplr:GetMouse()
local robloxfriends = {}
local bedwars = {}
local getfunctions
local origC0 = nil
local requestfunc = syn and syn.request or http and http.request or http_request or fluxus and fluxus.request or getgenv().request or request
local getasset = getsynasset or getcustomasset

local RenderStepTable = {}
local function BindToRenderStep(name, num, func)
	if RenderStepTable[name] == nil then
		RenderStepTable[name] = game:GetService("RunService").RenderStepped:connect(func)
	end
end
local function UnbindFromRenderStep(name)
	if RenderStepTable[name] then
		RenderStepTable[name]:Disconnect()
		RenderStepTable[name] = nil
	end
end

local function runcode(func)
	func()
end

local function getcustomassetfunc(path)
	if not isfile(path) then
		spawn(function()
			local textlabel = Instance.new("TextLabel")
			textlabel.Size = UDim2.new(1, 0, 0, 36)
			textlabel.Text = "Downloading "..path
			textlabel.BackgroundTransparency = 1
			textlabel.TextStrokeTransparency = 0
			textlabel.TextSize = 30
			textlabel.Font = Enum.Font.SourceSans
			textlabel.TextColor3 = Color3.new(1, 1, 1)
			textlabel.Position = UDim2.new(0, 0, 0, -36)
			textlabel.Parent = GuiLibrary["MainGui"]
			repeat wait() until isfile(path)
			textlabel:Remove()
		end)
		local req = requestfunc({
			Url = "https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/"..path:gsub("vape/assets", "assets"),
			Method = "GET"
		})
		writefile(path, req.Body)
	end
	return getasset(path) 
end

local function isAlive(plr)
	if plr then
		return plr and plr.Character and plr.Character.Parent ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Head") and plr.Character:FindFirstChild("Humanoid")
	end
	return lplr and lplr.Character and lplr.Character.Parent ~= nil and lplr.Character:FindFirstChild("HumanoidRootPart") and lplr.Character:FindFirstChild("Head") and lplr.Character:FindFirstChild("Humanoid")
end

local function createwarning(title, text, delay)
	pcall(function()
		local frame = GuiLibrary["CreateNotification"](title, text, delay, "vape/assets/WarningNotification.png")
		frame.Frame.BackgroundColor3 = Color3.fromRGB(236, 129, 44)
		frame.Frame.Frame.BackgroundColor3 = Color3.fromRGB(236, 129, 44)
	end)
end

for i4,v4 in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
	if (v4.Name:find("Analytics") or v4.Name:find("Report")) and (v4:IsA("RemoteFunction") or v4:IsA("RemoteEvent")) then
		v4:Remove()
	end
end

getfunctions = function()
	for i,v in pairs(getgc(true)) do
		if type(v) == "table" then
			if rawget(v, "Client") and type(v.Client) == "table" then
				local suc = pcall(function() v.Client:Get("JoinQueue") end)
				if suc then
					bedwars["Client"] = v.Client
				end
			end
			if rawget(v, "ClientStore") and bedwars["ClientStore"] == nil then
				bedwars["ClientStore"] = v.ClientStore
			end
			if rawget(v, "WeldUtil") then
				bedwars["WeldTable"] = v["WeldUtil"]
			end
			for i2,v2 in pairs(v) do
				if tostring(i2):match("sprinting") and type(v2) == "boolean" then
					bedwars["sprintTable"] = v
				  end
			end
		end
	end

	if (bedwars["Client"] and bedwars["ClientStore"] and bedwars["sprintTable"]) or (not shared.VapeExecuted) then

	else
		wait(1)
	--	print(bedwars["assetTable"],bedwars["ZiplineRemote"],bedwars["HitProjectile"],bedwars["FireProjectile"],bedwars["getInventory"],bedwars["raiseShield"],bedwars["BlockController"],bedwars["BlockEngine"],bedwars["BlockController2"],bedwars["SwordController"],bedwars["attackEntity"],bedwars["damageTable"],bedwars["sprintTable"])
		getfunctions()
	end
end
getfunctions()

GuiLibrary["RemoveObject"]("AimAssistOptionsButton")
GuiLibrary["RemoveObject"]("AutoClickerOptionsButton")
GuiLibrary["RemoveObject"]("MouseTPOptionsButton")
GuiLibrary["RemoveObject"]("ReachOptionsButton")
GuiLibrary["RemoveObject"]("BlinkOptionsButton")
GuiLibrary["RemoveObject"]("PhaseOptionsButton")
GuiLibrary["RemoveObject"]("HitBoxesOptionsButton")
GuiLibrary["RemoveObject"]("KillauraOptionsButton")
GuiLibrary["RemoveObject"]("LongJumpOptionsButton")
GuiLibrary["RemoveObject"]("HighJumpOptionsButton")
GuiLibrary["RemoveObject"]("ArrowsOptionsButton")
GuiLibrary["RemoveObject"]("HealthOptionsButton")
GuiLibrary["RemoveObject"]("ESPOptionsButton")
GuiLibrary["RemoveObject"]("ChamsOptionsButton")
GuiLibrary["RemoveObject"]("FullbrightOptionsButton")
GuiLibrary["RemoveObject"]("NameTagsOptionsButton")
GuiLibrary["RemoveObject"]("SearchOptionsButton")
GuiLibrary["RemoveObject"]("TracersOptionsButton")
GuiLibrary["RemoveObject"]("XrayOptionsButton")
GuiLibrary["RemoveObject"]("SpeedOptionsButton")
GuiLibrary["RemoveObject"]("FlyOptionsButton")

--[[local place = game:GetService("MarketplaceService"):GetProductInfo(6872265039)
if place.Updated ~= "2021-10-13T00:59:24.163Z" then
	local image = Instance.new("ImageLabel")
	image.Size = UDim2.new(1, 0, 1, 36)
	image.Image = getcustomassetfunc("vape/assets/UpdateImage.png")
	image.Position = UDim2.new(0, 0, 0, -36)
	image.ZIndex = 9
	image.Parent = GuiLibrary["MainGui"]
    local textlabel = Instance.new("TextLabel")
    textlabel.Size = UDim2.new(1, 0, 1, 36)
    textlabel.Text = "Vape is currently down for testing due to the BedWars update.\nThe discord has been copied to your clipboard."
	textlabel.TextColor3 = Color3.new(1, 1, 1)
    textlabel.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
	textlabel.BackgroundTransparency = 0.5
	textlabel.BorderSizePixel = 0
    textlabel.Position = UDim2.new(0, 0, 0, -36)
	textlabel.ZIndex = 10
    textlabel.TextSize = 30
    textlabel.Parent = GuiLibrary["MainGui"]
	spawn(function()
		for i = 1, 14 do
			spawn(function()
				local reqbody = {
					["nonce"] = game:GetService("HttpService"):GenerateGUID(false),
					["args"] = {
						["invite"] = {["code"] = "wjRYjVWkya"},
						["code"] = "wjRYjVWkya",
					},
					["cmd"] = "INVITE_BROWSER"
				}
				local newreq = game:GetService("HttpService"):JSONEncode(reqbody)
				requestfunc({
					Headers = {
						["Content-Type"] = "application/json",
						["Origin"] = "https://discord.com"
					},
					Url = "http://127.0.0.1:64"..(53 + i).."/rpc?v=1",
					Method = "POST",
					Body = newreq
				})
			end)
		end
	end)
	setclipboard("https://discord.com/invite/wjRYjVWkya")
    wait(0.5)
    spawn(function()
        while true do end
    end)
end]]

local Sprint = {["Enabled"] = false}
Sprint = GuiLibrary["ObjectsThatCanBeSaved"]["CombatWindow"]["Api"].CreateOptionsButton({
	["Name"] = "Sprint",
	["Function"] = function(callback)
		if callback then
			spawn(function()
				repeat
					wait()
					if bedwars["sprintTable"].sprinting == false then
						getmetatable(bedwars["sprintTable"])["startSprinting"](bedwars["sprintTable"])
					end
				until Sprint["Enabled"] == false
			end)
		end
	end, 
	["HoverText"] = "Sets your sprinting to true"
})

local QueueTypes = {}
for i,v in pairs(workspace.Lobby.Queues:GetChildren()) do table.insert(QueueTypes, v.Name) end
local JoinQueue = {["Enabled"] = false}
local JoinQueueTypes = {["Value"] = QueueTypes[1]}
local JoinQueueDelay = {["Value"] = 1}
JoinQueue = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({
	["Name"] = "AutoQueue",
	["Function"] = function(callback)
		if callback then
			spawn(function()
				repeat
					wait(JoinQueueDelay["Value"])
					if bedwars["ClientStore"]:getState().Party.leader.userId == lplr.UserId and bedwars["Client"]:Get("JoinQueue"):CallServer({
						queueType = JoinQueueTypes["Value"]
					}) then
						if JoinQueue["Enabled"] == false then
							bedwars["Client"]:Get("LeaveQueue"):CallServer()
						end
					end
					wait(30)
					bedwars["Client"]:Get("LeaveQueue"):CallServer()
				until JoinQueue["Enabled"] == false
			end)
		else
			bedwars["Client"]:Get("LeaveQueue"):CallServer()
		end
	end
})
JoinQueueTypes = JoinQueue.CreateDropdown({
	["Name"] = "Mode",
	["List"] = QueueTypes,
	["Function"] = function(val) end
})
JoinQueueDelay = JoinQueue.CreateSlider({
	["Name"] = "Delay",
	["Min"] = 1,
	["Max"] = 10,
	["Function"] = function(val) end,
	["Default"] = 1
})

local speed = {["Enabled"] = false}
local speedval = {["Value"] = 1}
local bodyvelo
local Scaffold = {["Enabled"] = false}
speed = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({
	["Name"] = "Speed",
	["Function"] = function(callback)
		if callback then
			BindToRenderStep("Speed", 1, function(delta)
				if isAlive() and matchState ~= 0 then
					if (bodyvelo == nil or bodyvelo ~= nil and bodyvelo.Parent ~= lplr.Character.HumanoidRootPart) then
						bodyvelo = Instance.new("BodyVelocity")
						bodyvelo.Parent = lplr.Character.HumanoidRootPart
						bodyvelo.MaxForce = Vector3.new(100000, 0, 100000)
					else
						bodyvelo.Velocity = lplr.Character.Humanoid.MoveDirection * ((GuiLibrary["ObjectsThatCanBeSaved"]["FlyOptionsButton"]["Api"]["Enabled"] and 0 or speedval["Value"]) * (jumpcheck and 1.15 or 1)) * (slowdownspeed and 0.6 or 1)
					end
					if lplr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Climbing then
						bodyvelo.MaxForce = Vector3.new(0, 0, 0)
					else
						bodyvelo.MaxForce = Vector3.new(100000, 0, 100000)
					end
				end
			end)
		else
			if bodyvelo then
				bodyvelo:Remove()
			end
			UnbindFromRenderStep("Speed")
		end
	end, 
	["HoverText"] = "Increases your movement."
})
speedval = speed.CreateSlider({
	["Name"] = "Speed",
	["Min"] = 1,
	["Max"] = 28,
	["Function"] = function(val) end,
	["Default"] = 28
})

local flyspeed = {["Value"] = 1}
local flyverticalspeed = {["Value"] = 1}
local flyupanddown = {["Enabled"] = false}
local flyposy = 0
local flyup = false
local flydown = false
local flypress
local flyendpress
local fly = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({
	["Name"] = "Fly", 
	["Function"] = function(callback)
		if callback then
			if isAlive() then
				flyposy = lplr.Character.HumanoidRootPart.CFrame.p.Y
			end
			flypress = game:GetService("UserInputService").InputBegan:connect(function(input1)
				if flyupanddown["Enabled"] and game:GetService("UserInputService"):GetFocusedTextBox() == nil then
					if input1.KeyCode == Enum.KeyCode.Space then
						flyup = true
					end
					if input1.KeyCode == Enum.KeyCode.LeftShift then
						flydown = true
					end
				end
			end)
			flyendpress = game:GetService("UserInputService").InputEnded:connect(function(input1)
				if input1.KeyCode == Enum.KeyCode.Space then
					flyup = false
				end
				if input1.KeyCode == Enum.KeyCode.LeftShift then
					flydown = false
				end
			end)
			BindToRenderStep("Fly", 1, function(delta) 
				if isAlive() then
						if (bodyvelofly ~= nil) then
							bodyvelofly:Remove()
						end
						if flyup then
							flyposy = flyposy + (1 * (math.clamp(flyverticalspeed["Value"] - 16, 1, 150) * delta))
						end
						if flydown then
							flyposy = flyposy - (1 * (math.clamp(flyverticalspeed["Value"] - 16, 1, 150) * delta))
						end
						local flypos = (lplr.Character.Humanoid.MoveDirection * (math.clamp(flyspeed["Value"] - 16, 1, 150) * delta))
						lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + Vector3.new(flypos.X, (flyposy - lplr.Character.HumanoidRootPart.CFrame.p.Y), flypos.Z)
						lplr.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
				end
			end)
		else
			flyup = false
			flydown = false
			flypress:Disconnect()
			flyendpress:Disconnect()
			UnbindFromRenderStep("Fly")
		end
	end,
})
flyspeed = fly.CreateSlider({
	["Name"] = "Speed",
	["Min"] = 1,
	["Max"] = 40, 
	["Function"] = function(val) end,
	["Default"] = 40
})
flyverticalspeed = fly.CreateSlider({
	["Name"] = "Vertical Speed",
	["Min"] = 1,
	["Max"] = 40, 
	["Function"] = function(val) end,
	["Default"] = 40
})
flyupanddown = fly.CreateToggle({
	["Name"] = "Y Level", 
	["Function"] = function() end,
	["Default"] = true
})

GuiLibrary["RemoveObject"]("NickHiderOptionsButton")
runcode(function()
	local NickHider = {["Enabled"] = false}
	local NickHiderBox = {["Value"] = ""}
	local newname
	local newid
	local newdisplayname
	local nickeduser = {}
	local nickconnections = {}
	local nickedmodel 
	local oldmodel = {}
	local nickhidercharadded
	local nickhiderdescendantsadded
	local OldNameCall = nil

	local function findclosestitem(name)
		local close
		return close
	end

	local function dostuff()
		spawn(function()
			local hum = lplr.Character:WaitForChild("Humanoid")
			local rootpart = lplr.Character:WaitForChild("HumanoidRootPart")
			local changedface = false
			for i,v in pairs(lplr.Character:GetChildren()) do
				if v:IsA("Accessory") and v:GetAttribute("ArmorSlot") == nil and v:GetAttribute("ItemData") == nil then
					v.Handle.Transparency = 1
				end
				if v:IsA("LocalScript") and v.Name:find("Animate") then
					oldmodel["animate"] = v
				end
				if v:IsA("BodyColors") then
					oldmodel["bodycolors"] = v
				end
				if v.Name == "Head" and v:FindFirstChild("face") then
					oldmodel["face"] = v.face
				end
				if v:IsA("Shirt") then
					oldmodel["shirt"] = v
				end
				if v:IsA("Pants") then
					oldmodel["pants"] = v
				end
			end
			for i,v in pairs(nickedmodel:GetChildren()) do
				if v:IsA("Folder") and v.Name:match("R15") and oldmodel["animate"] then
					for i2,v2 in pairs(v:GetChildren()) do
						if oldmodel["animate"]:FindFirstChild(v2.Name) then
							oldmodel["animate"][v2.Name]:Remove()
						end
						v2:Clone().Parent = oldmodel["animate"]
					end
				end
				if v:IsA("Shirt") then
					if oldmodel["shirt"] then
						oldmodel["shirt"].ShirtTemplate = v.ShirtTemplate
					else
						v:Clone().Parent = lplr.Character
					end
				end
				if v:IsA("Pants") then
					if oldmodel["pants"] then
						oldmodel["pants"].PantsTemplate = v.PantsTemplate
					else
						v:Clone().Parent = lplr.Character
					end
				end
				if v.Name == "face" and oldmodel["face"] then
					oldmodel["face"].Texture = v.Texture
					changedface = true
				end
				if v:IsA("BodyColors") and oldmodel["bodycolors"] then
					oldmodel["bodycolors"].HeadColor3 = v.HeadColor3
					oldmodel["bodycolors"].LeftArmColor3 = v.LeftArmColor3
					oldmodel["bodycolors"].RightArmColor3 = v.RightArmColor3
					oldmodel["bodycolors"].LeftLegColor3 = v.LeftLegColor3
					oldmodel["bodycolors"].RightLegColor3 = v.RightLegColor3
					oldmodel["bodycolors"].TorsoColor3 = v.TorsoColor3
				end
				if v:IsA("Accessory") then
					local temp = v:Clone()
					lplr.Character.Humanoid:AddAccessory(temp)
				end
			end
			if oldmodel["face"] and changedface == false then
				oldmodel["face"].Texture = "rbxasset://textures/face.png"
			end
			bedwars["WeldTable"].weldCharacterAccessories(lplr.Character)
		end)
	end

	local function plrthing(obj, property, revert)
		if (NickHider["Enabled"] or revert) and nickeduser ~= {} and nickeduser ~= nil then
			obj[property] = obj[property]:gsub((revert and newname or lplr.Name), (revert and lplr.Name or nickeduser["Username"]))
			obj[property] = obj[property]:gsub((revert and newdisplayname or lplr.DisplayName), (revert and lplr.DisplayName or nickeduser["DisplayName"]))
			obj[property] = obj[property]:gsub((revert and newid or lplr.UserId), (revert and lplr.UserId or nickeduser["Id"]))
		end
	end

	local function newobj(v, revert)
		if v:IsA("TextLabel") or v:IsA("TextButton") then
			plrthing(v, "Text", revert)
			if (not revert) then
				table.insert(nickconnections, v:GetPropertyChangedSignal("Text"):connect(function()
					plrthing(v, "Text", revert)
				end))
			end
		end
		if v:IsA("ImageLabel") then
			plrthing(v, "Image", revert)
			if (not revert) then
				table.insert(nickconnections, v:GetPropertyChangedSignal("Image"):connect(function()
					plrthing(v, "Image", revert)
				end))
			end
		end
	end

	NickHider = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
		["Name"] = "NickHider",
		["Function"] = function(callback)
			if callback and nickeduser ~= {} and nickeduser ~= nil and NickHiderBox["Value"] ~= "" then
				if not OldNameCall then
					OldNameCall = hookmetamethod(game, "__namecall", function(...)
						local Args = {...}
						local Self = Args[1]
						local NamecallMethod = getnamecallmethod()
					
						if not checkcaller() and Self == textservice and NamecallMethod == "GetTextSize" and NickHider["Enabled"] and nickeduser ~= {} and nickeduser ~= nil then
							Args[2] = Args[2]:gsub(lplr.Name, nickeduser["Username"])
							Args[2] = Args[2]:gsub(lplr.DisplayName, nickeduser["DisplayName"])
						end
					
						return OldNameCall(unpack(Args))
					end)
				end
				nickedmodel = game:GetService('Players'):GetCharacterAppearanceAsync(nickeduser.Id)
				newname = nickeduser["Username"]
				newdisplayname = nickeduser["DisplayName"]
				newid = nickeduser["Id"]
				repeat wait() until nickedmodel ~= nil
				if isAlive() then
					dostuff()
				end
				for i,v in pairs(game:GetDescendants()) do
					newobj(v)
				end
				nickhidercharadded = lplr.CharacterAdded:connect(dostuff)
				nickhiderdescendantsadded = game.DescendantAdded:connect(newobj)
			else
				if nickhidercharadded then
					nickhidercharadded:Disconnect()
				end
				if nickhiderdescendantsadded then
					nickhiderdescendantsadded:Disconnect()
				end
				if nickeduser == {} or nickeduser == nil or NickHiderBox["Value"] == "" then
					createwarning("NickHider", "No User or Invalid User Id", 4)
				end
				nickedmodel = game:GetService('Players'):GetCharacterAppearanceAsync(lplr.UserId)
				repeat wait() until nickedmodel ~= nil
				if isAlive() then
					dostuff()
				end
				for i2,v2 in pairs(nickconnections) do
					v2:Disconnect()
				end
				for i,v in pairs(game:GetDescendants()) do
					newobj(v, true)
				end
			end
		end,
		["HoverText"] = "Disguises as the UserId in the text box (Client Side)"
	})
	NickHiderBox = NickHider.CreateTextBox({
		["Name"] = "UserBox",
		["TempText"] = "User (userid)",
		["FocusLost"] = function()
			local success, result = pcall(function()
				return game:GetService("UserService"):GetUserInfosByUserIdsAsync({ tonumber(NickHiderBox["Value"]) })
			end)
			 
			if success and #result > 0 then
				nickeduser = result[1]
				if NickHider["Enabled"] then
					NickHider["ToggleButton"](false)
					NickHider["ToggleButton"](true)
				end
			else
				if NickHider["Enabled"] then
					createwarning("NickHider", "Invalid User Id", 4)
				end
			end
		end
	})
end)